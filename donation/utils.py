import os
import hmac
import time
from base64 import b64encode
from hashlib import md5, sha1
from uuid import uuid4

from people.models import User


def serialize_donation(donation):
    try:
        cam_url = donation.campaign.url
        cam_title = donation.campaign.title
    except AttributeError:
        # this occurs with an Administrative Donation
        cam_url = '#'
        cam_title = 'Administrative Donation'
    try:
        min_url = donation.campaign.ministry.url
        min_title = donation.campaign.ministry.name
    except AttributeError:
        # this occurs with an Administrative Donation
        min_url = '#'
        min_title = 'Love Our Neighbor'
    return {'id': donation.id,
            'name': donation.user.display_name,
            'url': donation.url,
            'amount': donation.amount,
            'confirmation': donation.payment.confirmation,
            'payment_date': donation.payment.payment_date,
            'campaign': {'url': cam_url,
                         'title': cam_title},
            'ministry': {'url': min_url,
                         'title': min_title}}


def extract_exact_ctr(exact_ctr):
    """ Extracts data from Payeezy Gateway response.

        At the moment, Cardholder name is what is extracted as the API does not
        seem to return that via GET methods.

        Returns
        =======
        str
            String of Cardholder Name
   """
    lines = exact_ctr.splitlines()
    _str = 'CARDHOLDER NAME : '  # string to look for
    for _ in lines:
        if _str in _:
            return _.split(_str)[1]


def generate_payeezy_hash(login, tx_key, amount='', currency='USD', digest='sha1'):
    """ Generates a correct `x_fp_hash` value for use with the Payeezy Gateway.

    The parameters are login, and tx_key can be found on the 'Payments Page' in the Payeezy site.
    The sequence and timestamp are automatically generated by the function.

    More information on the API can be found here:
        https://support.payeezy.com/hc/en-us/articles/203992129-First-Data-Payeezy-Gateway-Hosted-Payment-Pages-Integration-Manual#6.1

    Part of this code has been taken from:
        https://github.com/payeezy/payeezy_direct_API/blob/master/payeezy_python/example/build/lib/payeezy/http_authorization.py

    Parameters
    ==========
    login: (str)
        String that identifies payment form in the Payeezy Gateway
    tx_key: (str)
        string to convert to bytes. This is used to sign the hash.
    amount: (int/str)
        (optional) Total dollar amount to be charged. This is to be generated/validated outside of this function.
    currency: (str)
        Defaults to 'USD'.
    digest: (str)
        Determines what digest algorithm to use for computing HMAC hash

    Returns
    =======
    tuple: (str, int, int)
        HMAC-MD5 string, sequence, timestamp
    """
    amount = amount
    sequence = int(os.urandom(16).hex(), 16)
    timestamp = int(round(time.time() * 1000))

    attr = (login, str(sequence), str(timestamp), str(amount), currency)
    message = '^'.join(attr)

    if digest is not 'sha1':
        digestmod = md5
    else:
        digestmod = sha1
    _digest = hmac.new(bytes(tx_key, 'utf-8'), msg=bytes(message, 'utf-8'), digestmod=digestmod).hexdigest()
    return _digest, sequence, timestamp


def generate_confirmation_id(campaign=None):
    """ Generates string to be used as internal confirmation id for Donation objects """
    _ = ''
    if campaign:
        _ = 'C' + str(campaign.id) + '-'
    return _ + str(b64encode(uuid4().bytes))[2:-3]


def check_anonymous_donation(request, email):
    """
    This determines whether a user has donated semi-anonymously or not based on the email.

    A semi-anonymous User has an account that is not activated.

    This also allows existing Users to donate without being signed-in

    Parameters
    ----------
    request: (HttpRequest)
    email: (str)

    Returns
    -------
    people.User
    """
    if request.user.is_authenticated:
        return request.user

    # create user if does not exist already
    # this allows users to donate using their account w/o signing in
    try:
        user = User.objects.get(email=email)
    except User.DoesNotExist:
        user = User.objects.create(email=email,
                                   password="", is_active=False)
        # TODO: email registration email
    return user
